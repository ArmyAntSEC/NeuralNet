using Microsoft.VisualStudio.TestTools.UnitTesting;

using NeuralNetAsp.Models.MatrixCore;

namespace NeuralNetAsp.UnitTests.MatrixCore.Scalar;

[TestClass]
public class TestMatrixScalarOperators
{
  [TestMethod]
  public void testScalarMultiplication()
  {
    var height = 2;
    var width = 3;
    var factor = 2.0;

    var matrix = Matrix.generateRandomMatrix(height, width);
    var matrix2 = matrix.times(factor);

    for (int i = 0; i < width; i++)
    {
      for (int j = 0; j < height; j++)
      {
        Assert.AreEqual(matrix2.Get(j, i), factor * matrix.Get(j, i), 1e-5);
      }
    }
  }

  [TestMethod]
  public void testExponential()
  {
    var data = new Matrix(new double[1, 2] { { 1, 3 } });

    Matrix result = data.exp();

    Assert.AreEqual(2, result.GetWidth());
    Assert.AreEqual(1, result.GetHeight());

    Assert.AreEqual(2.7183, result.Get(0), 1e-4);
    Assert.AreEqual(20.0855, result.Get(1), 1e-4);

  }

  [TestMethod]
  public void testAddScalar()
  {
    var data = new Matrix(new double[1, 2] { { 1, 3 } });

    Matrix result = data.plus(2);

    Assert.AreEqual(2, result.GetWidth());
    Assert.AreEqual(1, result.GetHeight());

    Assert.AreEqual(3, result.Get(0));
    Assert.AreEqual(5, result.Get(1));

  }

  [TestMethod]
  public void testTranspose()
  {
    var data = new Matrix(new double[3, 2] { { 1, 4 }, { 2, 5 }, { 3, 6 } });

    Matrix result = data.transpose();

    Assert.AreEqual(2, result.GetHeight());
    Assert.AreEqual(3, result.GetWidth());

    Assert.AreEqual(1, result.Get(0, 0));
    Assert.AreEqual(2, result.Get(0, 1));
    Assert.AreEqual(3, result.Get(0, 2));
    Assert.AreEqual(4, result.Get(1, 0));
    Assert.AreEqual(5, result.Get(1, 1));
    Assert.AreEqual(6, result.Get(1, 2));

  }

  [TestMethod]
  public void testAbs()
  {
    var data = new Matrix(new double[,] { { 1, -4 } });

    Matrix result = data.abs();

    Assert.AreEqual(1, result.GetHeight());
    Assert.AreEqual(2, result.GetWidth());

    Assert.AreEqual(1, result.Get(0));
    Assert.AreEqual(4, result.Get(1));

  }

}